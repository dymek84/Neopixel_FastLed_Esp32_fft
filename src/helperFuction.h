#pragma once

#include "Imports.h"

void SetLeftStripe(int i, uint32_t color)
{
    stripe[NUM_LEDS_STRIPE / 2 + i] = CHSV(color, 255, 255);
}
void SetRightStripe(int i, uint32_t color)
{
    stripe[NUM_LEDS_STRIPE / 2 - i] = CHSV(color, 255, 255);
}
int MatrixArrayFlip[8][32] =
    {
        {248, 247, 232, 231, 216, 215, 200, 199, 184, 183, 168, 167, 152, 151, 136, 135, 120, 119, 104, 103, 88, 87, 72, 71, 56, 55, 40, 39, 24, 23, 8, 7},
        {249, 246, 233, 230, 217, 214, 201, 198, 185, 182, 169, 166, 153, 150, 137, 134, 121, 118, 105, 102, 89, 86, 73, 70, 57, 54, 41, 38, 25, 22, 9, 6},
        {250, 245, 234, 229, 218, 213, 202, 197, 186, 181, 170, 165, 154, 149, 138, 133, 122, 117, 106, 101, 90, 85, 74, 69, 58, 53, 42, 37, 26, 21, 10, 5},
        {251, 244, 235, 228, 219, 212, 203, 196, 187, 180, 171, 164, 155, 148, 139, 132, 123, 116, 107, 100, 91, 84, 75, 68, 59, 52, 43, 36, 27, 20, 11, 4},
        {252, 243, 236, 227, 220, 211, 204, 195, 188, 179, 172, 163, 156, 147, 140, 131, 124, 115, 108, 99, 92, 83, 76, 67, 60, 51, 44, 35, 28, 19, 12, 3},
        {253, 242, 237, 226, 221, 210, 205, 194, 189, 178, 173, 162, 157, 146, 141, 130, 125, 114, 109, 98, 93, 82, 77, 66, 61, 50, 45, 34, 29, 18, 13, 2},
        {254, 241, 238, 225, 222, 209, 206, 193, 190, 177, 174, 161, 158, 145, 142, 129, 126, 113, 110, 97, 94, 81, 78, 65, 62, 49, 46, 33, 30, 17, 14, 1},
        {255, 240, 239, 224, 223, 208, 207, 192, 191, 176, 175, 160, 159, 144, 143, 128, 127, 112, 111, 96, 95, 80, 79, 64, 63, 48, 47, 32, 31, 16, 15, 0}}; ////
int MatrixArray[8][32] =
    {
        {0, 15, 16, 31, 32, 47, 48, 63, 64, 79, 80, 95, 96, 111, 112, 127, 128, 143, 144, 159, 160, 175, 176, 191, 192, 207, 208, 223, 224, 239, 240, 255},
        {1, 14, 17, 30, 33, 46, 49, 62, 65, 78, 81, 94, 97, 110, 113, 126, 129, 142, 145, 158, 161, 174, 177, 190, 193, 206, 209, 222, 225, 238, 241, 254},
        {2, 13, 18, 29, 34, 45, 50, 61, 66, 77, 82, 93, 98, 109, 114, 125, 130, 141, 146, 157, 162, 173, 178, 189, 194, 205, 210, 221, 226, 237, 242, 253},
        {3, 12, 19, 28, 35, 44, 51, 60, 67, 76, 83, 92, 99, 108, 115, 124, 131, 140, 147, 156, 163, 172, 179, 188, 195, 204, 211, 220, 227, 236, 243, 252},
        {4, 11, 20, 27, 36, 43, 52, 59, 68, 75, 84, 91, 100, 107, 116, 123, 132, 139, 148, 155, 164, 171, 180, 187, 196, 203, 212, 219, 228, 235, 244, 251},
        {5, 10, 21, 26, 37, 42, 53, 58, 69, 74, 85, 90, 101, 106, 117, 122, 133, 138, 149, 154, 165, 170, 181, 186, 197, 202, 213, 218, 229, 234, 245, 250},
        {6, 9, 22, 25, 38, 41, 54, 57, 70, 73, 86, 89, 102, 105, 118, 121, 134, 137, 150, 153, 166, 169, 182, 185, 198, 201, 214, 217, 230, 233, 246, 249},
        {7, 8, 23, 24, 39, 40, 55, 56, 71, 72, 87, 88, 103, 104, 119, 120, 135, 136, 151, 152, 167, 168, 183, 184, 199, 200, 215, 216, 231, 232, 247, 248}};
uint16_t XY(uint8_t x, uint8_t y)
{
    return MatrixArray[y][x];
    // x = COLS - x;
    if (y % 2 == 0) // even rows
    {
        return y * MATRIX_WIDTH + x;
    }
    else // odd rows
    {
        return y * MATRIX_WIDTH + MATRIX_HEIGHT - x - 1;
    }
}

byte myArray[8][32]; // display buffer

byte num[10][8] = {
    // our font for numbers 0-9

    {0x38,  /* 001110   number 0 */
     0x44,  /* 010001 */
     0x4C,  /* 010011 */
     0x54,  /* 010101 */
     0x64,  /* 011001 */
     0x44,  /* 010001 */
     0x38,  /* 001110 */
     0x00}, /* 000000 */
    {0x10,  /* 000100   number 1 */
     0x30,  /* 001100 */
     0x10,  /* 000100 */
     0x10,  /* 000100 */
     0x10,  /* 000100 */
     0x10,  /* 000100 */
     0x38,  /* 001110 */
     0x00}, /* 000000 */
    {0x38,  /* 001110   number 2  */
     0x44,  /* 010001 */
     0x04,  /* 000001 */
     0x18,  /* 000110 */
     0x20,  /* 001000 */
     0x40,  /* 010000 */
     0x7C,  /* 011111 */
     0x00}, /* 000000 */
    {0x38,  /* 001110   number 3  */
     0x44,  /* 010001 */
     0x04,  /* 000001 */
     0x38,  /* 001110 */
     0x04,  /* 000001 */
     0x44,  /* 010001 */
     0x38,  /* 001110 */
     0x00}, /* 000000 */
    {0x08,  /* 000010   number 4  */
     0x18,  /* 000110 */
     0x28,  /* 001010 */
     0x48,  /* 010010 */
     0x7C,  /* 011111 */
     0x08,  /* 000010 */
     0x08,  /* 000010 */
     0x00}, /* 000000 */
    {0x7C,  /* 011111   number 5  */
     0x40,  /* 010000 */
     0x40,  /* 010000 */
     0x78,  /* 011110 */
     0x04,  /* 000001 */
     0x44,  /* 010001 */
     0x38,  /* 001110 */
     0x00}, /* 000000 */
    {0x18,  /* 000110   number 6  */
     0x20,  /* 001000 */
     0x40,  /* 010000 */
     0x78,  /* 011110 */
     0x44,  /* 010001 */
     0x44,  /* 010001 */
     0x38,  /* 001110 */
     0x00}, /* 000000 */
    {0x7C,  /* 011111   number 7  */
     0x04,  /* 000001 */
     0x08,  /* 000010 */
     0x10,  /* 000100 */
     0x20,  /* 001000 */
     0x20,  /* 001000 */
     0x20,  /* 001000 */
     0x00}, /* 000000 */
    {0x38,  /* 001110   number 8  */
     0x44,  /* 010001 */
     0x44,  /* 010001 */
     0x38,  /* 001110 */
     0x44,  /* 010001 */
     0x44,  /* 010001 */
     0x38,  /* 001110 */
     0x00}, /* 000000 */
    {0x38,  /* 001110   number 9  */
     0x44,  /* 010001 */
     0x44,  /* 010001 */
     0x3C,  /* 001111 */
     0x04,  /* 000001 */
     0x08,  /* 000010 */
     0x30,  /* 001100 */
     0x00}  /* 000000 */
};
void drawPixelXY(uint8_t x, uint8_t y, CRGB color)
{
    if (x < 0 || x > (MATRIX_WIDTH - 1) || y < 0 || y > (MATRIX_HEIGHT - 1))
        return;
    uint32_t thisPixel = XY((uint8_t)x, (uint8_t)y);
    matrix[thisPixel] = color;
}
void fillAll(CRGB color)
{
    for (int i = 0; i < NUM_LEDS_MATRIX; i++)
    {
        matrix[i] = color;
    }
}